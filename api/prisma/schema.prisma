// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  email        String   @unique
  password     String
  resetToken   String?  @unique @map("reset_token")
  profileImage String?  @map("profile_image")
  role         Role     @default(USER)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  Trip         Trip[]

  @@map("user")
}

enum Role {
  USER
  ADMIN
}

model Trip {
  id          Int         @id @default(autoincrement())
  destination String
  budget      String
  travelers   String
  days        Int
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int         @map("user_id")
  Hotel       Hotel[]
  Itinerary   Itinerary[]

  @@map("trip")
}

model Hotel {
  id               Int    @id @default(autoincrement())
  hotelName        String @map("hotel_name")
  hotelAddress     String @map("hotel_address")
  hotelPrice       Float  @map("hotel_price")
  hotelRating      Float  @map("hotel_rating")
  hotelDescription String @map("hotel_description") @db.Text
  latitude         Float
  longitude        Float
  trip             Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId           Int    @map("trip_id")

  @@map("hotel")
}

model Itinerary {
  id               Int     @id @default(autoincrement())
  day              Int
  placeName        String  @map("place_name")
  placeDescription String  @map("place_description") @db.Text
  ticketPrice      Float   @map("ticket_price")
  latitude         Float
  longitude        Float
  startTime        String? @map("start_time")
  endTime          String? @map("end_time")
  trip             Trip    @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId           Int     @map("trip_id")

  @@map("itinerary")
}
